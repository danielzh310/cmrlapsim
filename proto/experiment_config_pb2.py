# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/experiment_config.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from proto import policy_config_pb2 as proto_dot_policy__config__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1dproto/experiment_config.proto\x1a\x19proto/policy_config.proto\"[\n\x04Task\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x11\n\ttrackPath\x18\x02 \x01(\t\x12\r\n\x05nLaps\x18\x03 \x01(\x03\x12#\n\x0cpolicyConfig\x18\n \x01(\x0b\x32\r.PolicyConfig\"q\n\x10\x45xperimentConfig\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0f\n\x07\x62\x61seDir\x18\x02 \x01(\t\x12\x19\n\x11vehicleConfigPath\x18\x03 \x01(\t\x12\x13\n\x04task\x18\x04 \x03(\x0b\x32\x05.Task\x12\x0e\n\x06gitSha\x18\x05 \x01(\tb\x06proto3')



_TASK = DESCRIPTOR.message_types_by_name['Task']
_EXPERIMENTCONFIG = DESCRIPTOR.message_types_by_name['ExperimentConfig']
Task = _reflection.GeneratedProtocolMessageType('Task', (_message.Message,), {
  'DESCRIPTOR' : _TASK,
  '__module__' : 'proto.experiment_config_pb2'
  # @@protoc_insertion_point(class_scope:Task)
  })
_sym_db.RegisterMessage(Task)

ExperimentConfig = _reflection.GeneratedProtocolMessageType('ExperimentConfig', (_message.Message,), {
  'DESCRIPTOR' : _EXPERIMENTCONFIG,
  '__module__' : 'proto.experiment_config_pb2'
  # @@protoc_insertion_point(class_scope:ExperimentConfig)
  })
_sym_db.RegisterMessage(ExperimentConfig)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _TASK._serialized_start=60
  _TASK._serialized_end=151
  _EXPERIMENTCONFIG._serialized_start=153
  _EXPERIMENTCONFIG._serialized_end=266
# @@protoc_insertion_point(module_scope)
